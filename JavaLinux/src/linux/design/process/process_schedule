Linux提供了抢占式的多任务模型，进程被抢占之前能够运行的时间为"时间片"

进程分为"I/O消耗型"和"处理器消耗型"

nice值用于衡量进程的优先级，nice值越高，优先级越小

完全公平调度（CFS）是针对普通进程的调度器类，在CFS中，nice被用于处理器使用权重，也就是说进程间nice值的比例决定其使用处理器的时间
CFS会选择最小的vruntime的进程作为下一个需要运行的进程运行
CFS采用红黑树来存储所有的运行进程（其节点的value为vruntime）
当进程被唤醒或者通过fork()新建进程的时候，会将节点插入到红黑树中
当进程被阻塞或者终结的时候，会从红黑树中删除节点

当进程处于休眠状态（或者说阻塞）时，其会被加入到"等待队列"中（当然，在此之前会从红黑树中移除）
"等待队列"是一个由进程组成的简单链表

schedule()为调度入口

"上下文切换"：一个可执行进程切换到另一个可执行进程，内核中为context_switch()，由schedule()函数调用
context_switch()完成了两件事情：
    1.把虚拟内存从上一个进程映射切换到新进程中
    2.从上一个进程的处理器状态切换到新进程的处理器状态（包括保存和恢复栈信息，寄存器信息）


Linux的进程调度提供强制的"处理器绑定"机制（processor affinity 也就是说指定某个进程必须在某个处理器上运行）
通过sched_setaffinity()系统调用实现指定运行的处理器

sched_yield()系统调用通过将进程从活动队列移动到过期队列中实现


