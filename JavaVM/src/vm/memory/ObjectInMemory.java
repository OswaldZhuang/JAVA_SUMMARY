package vm.memory;

/*
 * 虚拟机中的对象
 */
public class ObjectInMemory {

    /*
     * 对象的创建过程:
     * 对象的创建是通过new关键字进行的,
     * 虚拟机首先会检查相应的类是否被加载(如果没有的话先进行类加载操作)
     * 然后虚拟机为该对象分配内存
     * 在分配内存的过程中存在线程安全性问题:在给对象A分配内存的时候(更新内存指针),内存分配到一半,指针
     * 还没有更新,然后被另外一个线程读取,这样这个线程就只获得"一半"对象
     * 有两种方法来解决这个问题:1.利用CAS操作和失败重试.2.在(Thread Local Allocation Buffer,TLAB)
     * (本地线程分配缓冲,是堆中的一块区域,但所有权是某个线程而不是共享)中分配内存,当TLAB用完的时候就进行更新同步,
     * 分配完内存之后虚拟机将内存空间赋值为零值(不包括对象头)
     * 然后设置该对象的对象头
     * 接着执行<init>指令完成对象的初始化
     */

    /*
     * 对象在内存中的存储布局分为三个区域:
     * 对象头(Header)
     * 实例数据(Instance Data)
     * 对齐填充(Padding)
     */

    /*
     * Object Header 对象头
     * 1.MarkWord:对象自身的运行时数据,存储了如下内容:
     * 对象哈希码,
     * GC分代年龄
     * 锁状态标志
     * 线程持有的锁
     * 偏向线程ID
     * 偏向时间戳
     * 2.类型指针,该指针指向其类的元数据,换句话说通过该指针可以知道该对象属于哪个类
     */
}
