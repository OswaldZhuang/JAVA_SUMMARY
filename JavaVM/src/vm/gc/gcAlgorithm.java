package vm.gc;

public class gcAlgorithm {
    /**
     * JVM gc算法
     */

    /**
     * 新生代
     *  复制算法：
     *      分配对象的时候，对象会被分配到新生代的eden区，gc的时候，大对象和"年龄"较大的对象被复制到老年代，而其他的可达对象
     *      会从eden区和from区复制到to区，最后清除掉eden区和from区的垃圾对象。再之后分配对象的时候将对象分配至eden区和to区，from区作为复制的地方。
     *      不断进行上述过程。
     *  老年代的对象可能会引用新生代，为了使得在新生代gc的时候不会去扫描老年代，JVM利用卡表（cardtable）来实现该目标，新生代gc的时候通过
     *  扫描卡表就能直到老年代哪块区域的对象对新生代对象有引用
     */

    /**
     * 老年代
     *  标记压缩算法
     *      首先将可达对象进行标记（即这部分对象是不会被回收的），然后进行压缩，把这部分对象移动到某处（整齐密集的排列），最后清除那些
     *      不可达的对象
     */
}
