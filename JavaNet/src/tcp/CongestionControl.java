package tcp;
/*
 * 拥塞控制
 */
public class CongestionControl {
	
	/*
	 * 慢启动:
	 * 发送端每次发送的数据大小是逐步增大的(在收到数据的确认后再增加发送的大小)
	 * 直到达到原先设定的"慢启动阈值"为止
	 * 发送端需要维护一个"拥塞窗口"(CWND)
	 * 发送的数据大小为"拥塞窗口"和发送窗口的最小值
	 * 每次发送的数据段大小为MMS(最大数据段大小),2MMS,4MMS,.....(前提是数据能够得到确认)
	 * 如果发生了数据的丢失,那么"慢启动阈值"设置为原来的一半,CWND重置为MMS
	 */
	
	/*
	 * 拥塞避免:
	 *当CWND第二次达到"慢启动阈值"时,其每次只增加一个MMS,如果期间数据发生丢失,处理方式
	 *同上 
	 */
	
	/*
	 * 快速重传/快速恢复:
	 * 当接收端收到一个不是按序到达的数据段时,其发送一个重复的ack数据段,发送方连续收到三个这样的
	 * 数据段后,即认为数据段丢失,发送方不等待重传定时器超时就重传数据并且将当前的CWND设置为当前
	 * "慢启动阈值"的一半,再进行上述的"拥塞避免"算法
	 */

}
