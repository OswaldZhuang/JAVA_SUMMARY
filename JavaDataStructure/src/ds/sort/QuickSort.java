package ds.sort;

import java.util.Arrays;

/*
 * 快速排序
 */
public class QuickSort {
	
	/*
	 * 快排的思想在于首先找到一个基准的数(一般来说就是无序序列的左边第一个),
	 * 然后将比基准数小的数放在其左边,比基准数大的数放在其右边.一轮完成之后,
	 * 这个基准数就到了应该处于的位置.
	 * 具体做法为:分别在序列的最左边和最右边放置两个"哨兵"i , j ,i负责"侦查"比基准数
	 * 大的数,j负责"侦查"比基准数小的数.j先移动(?),找到符合条件的数之后停下,i后移动,也是如此,
	 * 之后二者所在的数字交换位置.不断如此,最后当i继续移动遇到j的时候(或者反过来),i(j)停下.将i,j相遇位置的
	 * 数与基数互换,一轮完成.
	 * 之后递归的对已经安放好位置的数字的左右序列进行相同的操作,直到序列中仅仅有一个数为止
	 */
	/*
	 * 快排的时间复杂度,最好情况为nlogn,最坏情况为n^2
	 */
	int arr[];
	
	//right:右边界
	//left:左边界
	public void quickSort(int left, int right) {
		//定义"哨兵"i, j 基准数base, 中间变量t
		int i, j, t, base;
		
		if(left >= right) {
			return;
		}
		
		i = left;
		j = right;
		base = arr[left];
		
		while(i != j) {
			
			while(arr[j] >= base ) {
				if(i == j) {
					break;
				}
				j--;
			}
			while(arr[i] <= base ) {
				if(i == j) {
					break;
				}
				i++;
			}
			
			//交换
			t = arr[j];
			arr[j] = arr[i];
			arr[i] = t;
			for(int x = 0; x< arr.length; x++) {
				System.out.print(arr[x]+",");
			}	
			System.out.println();
		}
		
		//i,j所处的位置与base交换 
		t = base;
		arr[left] = arr[i];
		arr[i] = t;
		
		quickSort(left, i-1);
		quickSort(i + 1, right);
	}
	
	public static void main(String[] args) {
		int arr[] = {23, 12, 45, 31, 21, 18, 16, 24, 9, 1, 0, 36, 76, 43, 12, 66};
		QuickSort q = new QuickSort();
		q.arr = arr;
		q.quickSort(0, 15);
		for(int i = 0; i< arr.length; i++) {
			System.out.print(arr[i]+",");
		}
	}
/*
 *执行结果为: 
 23,12,12,31,21,18,16,24,9,1,0,36,76,43,45,66,
23,12,12,0,21,18,16,24,9,1,31,36,76,43,45,66,
23,12,12,0,21,18,16,1,9,24,31,36,76,43,45,66,
23,12,12,0,21,18,16,1,9,24,31,36,76,43,45,66,
9,1,12,0,21,18,16,12,23,24,31,36,76,43,45,66,
9,1,0,12,21,18,16,12,23,24,31,36,76,43,45,66,
9,1,0,12,21,18,16,12,23,24,31,36,76,43,45,66,
0,1,9,12,21,18,16,12,23,24,31,36,76,43,45,66,
0,1,9,12,21,18,16,12,23,24,31,36,76,43,45,66,
0,1,9,12,21,18,16,12,23,24,31,36,76,43,45,66,
0,1,9,12,12,18,16,21,23,24,31,36,76,43,45,66,
0,1,9,12,12,18,16,21,23,24,31,36,76,43,45,66,
0,1,9,12,12,16,18,21,23,24,31,36,76,43,45,66,
0,1,9,12,12,16,18,21,23,24,31,36,76,43,45,66,
0,1,9,12,12,16,18,21,23,24,31,36,76,43,45,66,
0,1,9,12,12,16,18,21,23,24,31,36,76,43,45,66,
0,1,9,12,12,16,18,21,23,24,31,36,66,43,45,76,
0,1,9,12,12,16,18,21,23,24,31,36,45,43,66,76,
0,1,9,12,12,16,18,21,23,24,31,36,43,45,66,76,
*/

}
