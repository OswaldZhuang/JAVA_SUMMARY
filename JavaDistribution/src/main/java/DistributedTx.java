/**
 * 分布式事务
 */
public class DistributedTx {
    /**
     * JTA
     */

    /**
     * 消息队列
     * 
     */

    /**
     * 2PC
     * 二阶段提交：
     *
     * 第一阶段：commit-request阶段
     * 1.协调者（或者是leader）向所有参与者发送请求提交的消息和需要同步的数据，并等待所有参与者的回应
     * 2.参与者内部执行事务，并将数据写入redo log和undo log（准备提交事务），完成之后返回同意的消息，否则返回no
     *
     * 第二阶段：commit阶段
     * 当协调者收到了所有的同意消息后，发送commit消息给所有参与者，表示提交该事务
     * （如果参与者发送no或者参与者返回消息超时，那么协调者发送rollback消息给参与者使其回滚数据）
     * 参与者收到commit消息后提交事务，提交完成后返回ack给协调者
     * 当协调者收到所有ack后，协调者也提交该事务，如果有失败，同样需要发送rollback消息
     *
     * 2pc缺点：
     * 同步阻塞：如果协调者永久挂掉，那么参与者将可能永远无法提交事务
     */

    /**
     * 3PC
     * 三阶段提交：
     * 和2pc相比，3pc将2cp的commit阶段分为preCommit和Commit两个阶段
     * 协调者向参与者发送preCommit消息，参与者收到preCommit后认为可以提交
     * 一旦协调者挂掉后，参与者的等待commit会超时，这时候，参与者直接提交事务
     */

    /**
     * TCC
     * try-confirm-cancel
     * 又称为2阶段补偿事务
     *
     * 以支付为例
     * try阶段
     * 订单状态变为"支付中"
     * 账户余额不变，可用余额-1，并将1保存在某个字段中
     * 库存不变，可销售库存-1，并将1保存在某个字段中
     *
     * confirm阶段
     * 订单状态变为"支付完成"
     * 账户余额-1，可用余额不变，字段清零
     * 库存-1，可销售库存-1，字段清零
     *
     * cancel阶段
     * 订单状态变为"未支付"
     * 账户余额不变，可用余额回滚，字段清零
     * 库存不变，可销售库存回滚，字段清零
     *
     */
}
