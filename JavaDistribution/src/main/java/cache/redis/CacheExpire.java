package cache.redis;

/**
 * redis内存过期和淘汰机制
 */
public class CacheExpire {

    /**
     * 过期删除策略
     */
    /**
     * 定期删除
     * 采取定时任务，随机的抽取一些值检查，然后删除过期的值，如果删除的值的比例超过某个阈值，那么重复以上步骤
     * 缺点：定时任务会占用cpu时间，导致吞吐量下降
     */

    /**
     * 惰性删除
     * 每次查询值的时候，都会检查是否过期，如果过期，那么删除
     */

    /**
     * 淘汰策略
     * 当发生内存不足的情况时，那么就需要淘汰策略来减小内存
     * volatile-url：选择有过期时间设置的数据集中的url（最近最少使用）的数据进行淘汰
     * allkeys-url：所有数据集中的url的数据进行淘汰
     * valatile-ttl：在有过期时间的数据集中选择过期时间更早的值进行删除
     * no-eviction：不进行淘汰
     * allkeys-random：随机淘汰
     */

}
